# -*- coding: utf-8 -*-
"""ProjetoSpam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ChUGYp08yEi3plOC_PK-b58QUyzoz32m
"""

import pandas as pd
import re

caminho_csv = '/content/drive/MyDrive/projeto_spam.csv'

# Lista onde vamos guardar os dados limpos
dados = []

# Lê linha por linha e processa manualmente
with open(caminho_csv, encoding='ISO-8859-1') as f:
    for linha in f:
        partes = linha.strip().split(',', 1)  # separa apenas na primeira vírgula
        if len(partes) == 2:
            label = partes[0].strip().lower().replace('"', '')
            mensagem = partes[1].strip().replace('"', '')
            dados.append([label, mensagem])

# Cria o DataFrame com os dados tratados
df = pd.DataFrame(dados, columns=["label", "message"])

# Corrige os rótulos: 1 = spam, 0 = válido
df["label"] = df["label"].apply(lambda x: 1 if x == "spam" else 0)

# Remove mensagens vazias
df = df[df["message"].str.strip() != ""]

# Função de limpeza de texto
def limpar_texto(texto):
    texto = texto.lower()
    texto = re.sub(r'[^\w\s]', '', texto)
    return texto

df["message"] = df["message"].apply(limpar_texto)

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report
import gradio as gr

# Divide os dados
X_train, X_test, y_train, y_test = train_test_split(df["message"], df["label"], test_size=0.2, random_state=42)

# Pipeline: vetorização + classificação
modelo = Pipeline([
    ("vetorizador", TfidfVectorizer()),
    ("classificador", MultinomialNB())
])

# Treinamento
modelo.fit(X_train, y_train)

# Avaliação
y_pred = modelo.predict(X_test)
print(classification_report(y_test, y_pred, target_names=["valido", "spam"]))

# Interface Gradio
def classificar_mensagem(texto):
    texto_limpo = limpar_texto(texto)
    pred = modelo.predict([texto_limpo])[0]
    return "spam" if pred == 1 else "valido"

interface = gr.Interface(
    fn=classificar_mensagem,
    inputs=gr.Textbox(lines=3, label="Digite a mensagem"),
    outputs=gr.Textbox(label="Classificação"),
    title="Detector de SPAM"
)

interface.launch()

print(df.head())

